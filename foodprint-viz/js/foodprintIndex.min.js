/*! project-name v0.0.1 | (c) 2020 YOUR NAME | MIT License | http://link-to-your-git-repo.com */
const maxFoodprint=[108.7,32.36,1412.66,113.22];let currentFoodprint=[0,0,0,0,0],newFoodprint=[0,0,0,0,0],currentGlobalFoodprint=[0,0,0,0,0],currentGlobalFI=0,lastestSwapIsSet=!0,currentFoodprintDetail=[{mealId:"breakfast",mealFoodprint:[0,0,0,0,0],setSwapFoodprint:[0,0,0,0,0],newSwapFoodprint:[0,0,0,0,0]},{mealId:"lunch",mealFoodprint:[0,0,0,0,0],setSwapFoodprint:[0,0,0,0,0],newSwapFoodprint:[0,0,0,0,0]},{mealId:"snack",mealFoodprint:[0,0,0,0,0],setSwapFoodprint:[0,0,0,0,0],newSwapFoodprint:[0,0,0,0,0]},{mealId:"dinner",mealFoodprint:[0,0,0,0,0],setSwapFoodprint:[0,0,0,0,0],newSwapFoodprint:[0,0,0,0,0]}];function getFoodprint(o){return dataFoodprint.find(t=>t.id===o)}function getImpactArray(o){let t=[0,0,0,0,0];return t[0]=parseFloat(o.land_use_m2_per_kg)*parseFloat(o.portion_kg),t[1]=parseFloat(o.gas_emissions_kgCO2eq_per_kg)*parseFloat(o.portion_kg),t[2]=parseFloat(o.water_liters_per_kg)*parseFloat(o.portion_kg),t[3]=parseFloat(o.eutrophying_emissions_kgPO4eq_per_kg)*parseFloat(o.portion_kg),t[4]=parseFloat(o.cost_usd_per_kg)*parseFloat(o.portion_kg),t}function getMealFoodprint(o,t){const r=menusDetail[o].find(o=>o.key===t).ingredients.filter(o=>!0===o.active);let n=[0,0,0,0,0];return r.forEach(o=>{const t=getImpactArray(getFoodprint(o.id));n.forEach((o,r)=>{n[r]+=t[r]})}),n}function getSwapFoodprint(o){let t=[0,0,0,0,0];return o.addedIngredients.forEach(o=>{const r=getImpactArray(getFoodprint(o.id));t.forEach((o,n)=>{t[n]+=r[n]})}),o.removedIngredients.forEach(o=>{const r=getImpactArray(getFoodprint(o.id));t.forEach((o,n)=>{t[n]-=r[n]})}),t}function setLatestSwap(o,t){currentFoodprintDetail.forEach(o=>{o.mealId===t&&(o.setSwapFoodprint=o.newSwapFoodprint,o.newSwapFoodprint=[0,0,0,0,0])})}function getCurrentGlobalFoodprint(){currentGlobalFoodprint=[0,0,0,0,0],currentFoodprintDetail.forEach(o=>{currentGlobalFoodprint.forEach((t,r)=>{currentGlobalFoodprint[r]+=o.mealFoodprint[r]+o.setSwapFoodprint[r]})})}function updateFoodprint(o){currentFoodprint=newFoodprint,newFoodprint=o}function getFoodprintIndex(){let o=0;return maxFoodprint.forEach((t,r)=>{o+=newFoodprint[r]/maxFoodprint[r]}),(25*o).toFixed(0)}function getCurrentGlobalFI(){let o=0;currentGlobalFoodprint.forEach((t,r)=>{4!=r&&(o+=currentGlobalFoodprint[r]/maxFoodprint[r])}),currentGlobalFI=25*o}function getNewFI(o){let t=0;return currentGlobalFoodprint.forEach((r,n)=>{4!=n&&(t+=(currentGlobalFoodprint[n]+o[n])/maxFoodprint[n])}),25*t}